name: CI

on:
    push:
        branches: [ '*' ]
    pull_request: ~
    workflow_dispatch: ~

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build docker images (branch or tag name)
                uses: docker/bake-action@v6
                env:
                    IMAGE_VERSION: ${{ github.ref_name }}
                with:
                    pull: true
                    push: true
                    load: true
                    files: |
                        compose.yaml
                    set: |
                        *.cache-from=type=gha,scope=${{ github.ref }}
                        *.cache-from=type=gha,scope=refs/heads/main
                        *.cache-to=type=gha,scope=${{ github.ref }},mode=max
            -   name: Build docker images (latest if main)
                uses: docker/bake-action@v6
                if: github.ref == 'refs/heads/main'
                env:
                    IMAGE_VERSION: latest
                with:
                    pull: true
                    push: true
                    load: true
                    files: |
                        compose.yaml
                    set: |
                        *.cache-from=type=gha,scope=${{ github.ref }}
                        *.cache-from=type=gha,scope=refs/heads/main
                        *.cache-to=type=gha,scope=${{ github.ref }},mode=max

    benchmark:
        name: Benchmark
        runs-on: ubuntu-latest
        needs: [ build ]
        strategy:
            matrix:
                id_type: [ int, uuid_v1, uuid_v4, uuid_v6, uuid_v7 ]
                number_of_root_entity: [ 10000, 100000, 250000 ]
        permissions:
            contents: read
            packages: read
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Run services
                run: docker compose -f compose.yaml up -d --wait --wait-timeout 120 || (docker compose logs && exit 1)
            -   name: Run benchmark
                run: |
                    docker compose \
                        -f compose.yaml \
                            exec \
                                -e ID_TYPE=${{ matrix.id_type }} \
                                -e NUMBER_OF_ROOT_ENTITY=${{ matrix.number_of_root_entity }} \
                                -e COMPOSER_PROCESS_TIMEOUT=600 \
                                    php \
                                        composer benchmark
            -   name: Copy artifacts from container
                run: |
                    mkdir -p ./var
                    docker compose cp php:/app/var/benchmark-${{ matrix.id_type }}-${{ matrix.number_of_root_entity }}.csv ./var/
                    ls -al var/*
            -   name: Stop services
                run: docker compose -f compose.yaml down -v
            -   name: Upload benchmark results
                uses: actions/upload-artifact@v4
                with:
                    name: benchmark-${{ matrix.id_type }}-${{ matrix.number_of_root_entity }}.csv
                    path: var/benchmark-${{ matrix.id_type }}-${{ matrix.number_of_root_entity }}.csv

    merge:
        name: Merge benchmark results
        runs-on: ubuntu-latest
        needs: [ benchmark ]
        steps:
            -   name: Download benchmark results
                uses: actions/download-artifact@v5
                with:
                    pattern: benchmark-*.csv
            -   name: Merge benchmark results
                run: |
                    awk 'FNR==1 && NR!=1 {next} {print}' ./*/benchmark-*.csv > benchmark-results.csv
                    cat benchmark-results.csv
            -   name: Upload merged benchmark results
                uses: actions/upload-artifact@v4
                with:
                    name: benchmark-results.csv
                    path: benchmark-results.csv
            -   uses: geekyeggo/delete-artifact@v5
                with:
                    name: benchmark-*-*.csv
